Applications
------------

This page lists examples of applications and frameworks you can use to build a website.  They can also be seen at https://sample.soc.srcf.net, and you can take a look at their configuration inside ``/public/societies/sample``.

This is a work-in-progress – for any suggestions or corrections to this site, please email sample-admins@srcf.net.

PHP applications
~~~~~~~~~~~~~~~~

Scripts in ``public_html`` using ``.php`` extensions will be executed by PHP by default.

`WordPress <https://sample.soc.srcf.net/wordpress/>`__
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Follow WordPress' `installation guide <https://wordpress.org/support/article/how-to-install-wordpress/>`__.  To serve the site from the root of your SRCF domain, extract the contents of the ``wordpress`` folder in the download to your ``public_html``.  Databases should be created and configured as noted above.  Ensure your ``wp-config.php`` is not world-readable, as that will contain your database credentials.

It is advised to lock down WordPress' admin panel at ``/wp-admin/`` by putting that directory behind Raven authentication – see ``public_html/wordpress/wp-admin/.htaccess``.  We also recommend you disable *Allow link notifications from other blogs (pingbacks and trackbacks) on new posts*, under *Settings* > *Discussion* in the admin panel.

WordPress will likely refuse to do automatic updates, instead requesting FTP credentials – this is because it assumes it can't write its own files on the server.  To make this work you can add the following few lines to your ``wp-config.php``, near the bottom but above the line that says "stop editing"::

    /**
     * Force WordPress to use direct filesystem access so that upgrades work properly.
     * https://core.trac.wordpress.org/ticket/10205
     * https://codex.wordpress.org/Editing_wp-config.php
     */
    define('FS_METHOD', 'direct');
    define('FS_CHMOD_DIR', (02775 & ~ umask()));
    define('FS_CHMOD_FILE', (0664 & ~ umask()));

If configured correctly, the updates page should include text similar to *Future security updates will be applied automatically*.

.. warning::

    It is very important that you ensure that the **permissions on files in your society directory are writable by the society group** (and therefore the user that WordPress will run as).

    WordPress will not check in advance -- if some of your files are writable and some are not, you will end up with a half-upgraded WordPress.

If you have a low-traffic or private site, WordPress' cron service (which handles updates and other background tasks) may not run regularly enough.  You can invoke ``wp-cron.php`` manually using cron or systemd timers – see ``crontab`` or ``wordpress-cron.timer`` respectively.

Python applications
~~~~~~~~~~~~~~~~~~~

Whilst you can run Python scripts via CGI, the startup overhead is high which will make requests seem slow.  The suggested route is to run your own WSGI backend server (we recommend `gunicorn <https://gunicorn.org>`__), and have Apache forward requests as described above.

Generally you should keep your code outside of ``public_html`` – visitors should see the pages generated by your application, not the application itself.  If your application involves static files, you can exclude a directory from your proxying, and have the application write that directory directly (or symlink to it).

See ``run.sh`` for command-line options, and ``crontab`` or ``python-web@.service`` for deployment.

.. warning

    **Don't run development servers on the SRCF** – these typically provide remote code execution via debug consoles, which grants any visitor full access to your SRCF account.  Ensure your site runs in a production mode if configurable.

`Django <https://sample.soc.srcf.net/django/>`__ (`Root mount on custom domain <http://django.sample.soc.srcf.net>`__)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create the skeleton project::

    $ django-admin startproject example
    $ mv example django
    $ cd django

Now take a look at ``django/example/settings.py`` for how to configure your site.

`Flask <https://sample.soc.srcf.net/flask/>`__ (`with Raven login <https://sample.soc.srcf.net/flask/raven>`__)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

See ``flask/app.py`` for a minimum base application.

Node.js applications
~~~~~~~~~~~~~~~~~~~~

Ubuntu only provides a significantly outdated version of Node.js (v4.2.6 at the time of writing) in its repositories.  If you need a newer version, you can `download the latest Linux binaries <https://nodejs.org/en/download/>`__ and extract them to your (or your society's) home directory.  Note that it is your responsibility to keep it updated.

`Express <https://sample.soc.srcf.net/nodejs/>`__
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To install dependencies::

    $ npm install --save express

Then see ``nodejs/app.js`` for a minimum base application.

Forwarding requests to your application server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SRCF uses Apache to serve websites so if you need to forward requests to a backend web app, for example a Django, Rails or Express server, then you will need to forward web requests. Make sure you run your application server on ``sinkhole`` rather than ``pip`` or another SRCF server.

Using TCP ports
^^^^^^^^^^^^^^^

You will need to pick a port (we've used 999 here but you should pick a different one above 1024) and configure your application to bind to that port. Then stick the following in you ``.htaccess`` file::

    RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}
    RequestHeader set Host expr=%{HTTP_HOST}
    RewriteCond %{HTTP_HOST} ^your\.hostname\.tld$
    RewriteRule "^(.*)$" http://localhost:999/$1 [P,NE,L,QSA]

Using UNIX sockets
^^^^^^^^^^^^^^^^^^

You will need to configure your application to use a UNIX socket. You should make sure the socket is only accessible to you, either by using appropriate file modes or by picking a path that is only accessible to you such as ``/home/crsid/myapp/web.sock``. Then add the following to your ``.htaccess`` file, replacing as necessary::

    RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}
    RequestHeader set Host expr=%{HTTP_HOST}
    RewriteCond %{HTTP_HOST} ^your\.hostname\.tld$
    RewriteRule ^(.*)$ unix:/home/crsid/myapp/web.sock|http://your.hostname.tld/$1 [P,NE,L,QSA]

Static site generators
~~~~~~~~~~~~~~~~~~~~~~

You can use a generator of your choice to manage your site.  Just have it output into your account's ``public_html`` directory.

`Jekyll <https://sample.soc.srcf.net/jekyll/>`__
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create the skeleton project::

    $ jekyll new jekyll
    New jekyll site installed in /public/societies/sample/jekyll.
    $ cd jekyll

For a root site (i.e. top of public\_html)::

    $ ln -s /public/societies/sample/public_html _site

...or for a site in a subdirectory, edit ``_config.yaml`` to set ``baseurl`` to e.g. ``/jekyll``, then::

    $ mkdir /public/societies/sample/public_html/jekyll
    $ ln -s /public/societies/sample/public_html/jekyll _site

To (re)build the site::

    $ jekyll build
